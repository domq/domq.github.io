#+TITLE: Emacs en partant de zéro
#+SUBTITLE: https://go.epfl.ch/emacsdezero
#+DATE: 14.06.2022
#+AUTHOR: Dominique Quatravaux
#+EMAIL: dominique@quatravaux.org
#+LANGUAGE: fr
#+OPTIONS: timestamp:nil
#+OPTIONS: toc:1
#+OPTIONS: num:nil
#+MACRO: vocabulaire *📚 Vocabulaire*
#+MACRO: definitionofdone *🎯 /Definition of done/*
#+MACRO: flecheverslebas @@html:<span style="font: 3em bold; display: inline-block; color: var(--r-link-color);">˅</span>@@
#+MACRO: lettrine @@html:<span style="display: inline; vertical-align: 0%; font-size: 2em">$1</span>@@
#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js@4.3.1/
#+REVEAL_HLEVEL: 2
#+REVEAL_HEAD_PREAMBLE: <style type="text/css">
#+REVEAL_HEAD_PREAMBLE:  .reveal ul { display: inherit; }
#+REVEAL_HEAD_PREAMBLE:  section.slide-text-white { color: white; }
#+REVEAL_HEAD_PREAMBLE:  p.small { font-size: 0.6em; text-align: justify; }
#+REVEAL_HEAD_PREAMBLE:  section.slide-code-fineprint pre.src-elisp { font-size: 0.4em; }
#+REVEAL_HEAD_PREAMBLE:  code {  color: lightblue; }
#+REVEAL_HEAD_PREAMBLE: </style>
#+REVEAL_TITLE_SLIDE_BACKGROUND: https://media.mehrnews.com/d/2019/07/21/4/3185382.jpg
#+REVEAL_TITLE_SLIDE_BACKGROUND_OPACITY: 0.3

#+COMMENTÇAMARCHE: (use-package ox-reveal :quelpa)
#+COMMENTÇAMARCHE: 2. C-c C-e R B

* Chapitre 1 : autonomie
** Philosophie / orientation
    :PROPERTIES:
    :reveal_background: https://img.static-rmg.be/a/view/q75/w962/h503/4264804/4c49c975418611b921b55576f621e8ae-jpg.jpg
    :reveal_background_opacity: 0.4
    :html_container_class: slide-text-white
    :END:
- Ne pas s'attendre à ce que ça Juste Marche™ ! #desfoisoui #desfoisnon
- Un écosystème proliférant — Pas facile de faire les bons choix
- Même choisir une direction pour avancer peut faire l'objet d'un [[https://github.com/redguardtoo/mastering-emacs-in-one-year-guide][tuto]] !
  - 💁 S'astreindre à une {{{definitionofdone}}}
  - Concrètement : un jeu de tests manuel (rédigé et observé)

** But #1 : installation
- Pour le présent dojo : version minimale = Emacs 27 (celui d'Ubuntu Jammy), mais plus récent ≡ mieux

@@html:<p class="small">@@{{{lettrine(💡🥱)}}}
Si vous vous ennuyez : cliquez sur {{{flecheverslebas}}} en bas à droite...
@@html:</p>@@

*** À propos de cette présentation
    :PROPERTIES:
    :reveal_background: https://w0.peakpx.com/wallpaper/178/808/HD-wallpaper-heavenly-trumpets-statues-music-trumpet-heaven-celestial-angels.jpg
    :reveal_background_opacity: 0.3
    :html_container_class: slide-text-white
    :END:

- Écrite avec Emacs
- Un seul [[https://github.com/domq/domq.github.io/blob/main/20220614-emacs.org][fichier source]] (+ les images)
- 🔋 Grâce à [[https://orgmode.org/][🦄 org-mode]] + [[https://github.com/hexmode/ox-reveal][ox-reveal]]

@@html:<p class="small">@@{{{lettrine(↕️)}}}
Comme dans toute présentation [[https://revealjs.com/][reveal.js]], la flèche vers le bas {{{flecheverslebas}}} permet de naviguer vers des informations supplémentaires, que le présentateur «sautera» peut-être faute de temps.
@@html:</p>@@

*** Balises
    :PROPERTIES:
    :reveal_background: https://upload.wikimedia.org/wikipedia/commons/thumb/0/0b/BhfEpfenhofen_Ausfahrsignale_Talaufwaerts_II.JPG/1200px-BhfEpfenhofen_Ausfahrsignale_Talaufwaerts_II.JPG
    :reveal_background_opacity: 0.3
    :html_container_class: slide-text-white
    :END:

- {{{vocabulaire}}} :: Cette annotation repère les mots et concepts qu'utilise Emacs dans un sens bien à lui (privilège de l'âge...)
- {{{definitionofdone}}} :: Cette annotation suggère un nouveau point d'attention dans votre /definition of done/ ou contrôle-qualité de votre configuration Emacs. Considérez que vous venez de gagner un level lorsque vous la rencontrez 😉

** But #2 : éditer un fichier
- Ouvrir un fichier
  - À la souris, via les menus
  - Au clavier
    - 💡 Les menus montrent les raccourcis clavier !
    - Suivez le guide : [[https://www.gnu.org/software/emacs/refcards/pdf/refcard.pdf][GNU Emacs Reference Card]]
- Visualiser l'état sauvegardé ou non
  - {{{vocabulaire}}} : modeline
- Sauvegarder

** But #3 : plusieurs fichiers à la fois

- {{{vocabulaire}}} : buffer
- Exercice : découvrir comment changer de buffer
  - à la souris
  - au clavier
- {{{vocabulaire}}} : minibuffer
- La complétion avec Tab dans le minibuffer
  - On peut cliquer dedans !

- Plusieurs buffers à l'écran ? Pas de panique :
  - =C-x o= @@html:<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/74/PublicInformationSymbol_EmergencyExit.svg/563px-PublicInformationSymbol_EmergencyExit.svg.png" style="float: right; max-height: 10vh;" />@@
  - =C-g= ou =ESC ESC ESC= → À apprendre par cœur

*** But secondaire #3.1 : déplacements à l'intérieur d'un buffer
  - Commandes de mouvement : [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Moving-Point.html][→ doc officielle]]
  - Recherche littérale avant / arrière
  - Recherche par expression régulière avant / arrière

** But #4 : premières personnalisations

- À la souris : Options → Customize Emacs → Top-level Customization Group
- Au clavier : =M-x customize <RET>=
   - 💡 =M-x= == “command palette”
   - Votre touche méta ne marche pas ? Un peu de patience... (§ suivant)
     - Utiliser Escape pour l'instant : =Esc x customize <RET>=

*** Un buffer n'est pas un fichier !

Dans un buffer =*Customize*=, on ne peut pas modifier le texte.

💡 Les buffers qui n'ont pas de fichier ont typiquement un nom qui commence et finit par =*=.

Que faire alors ?
- Help → Describe ▸ ...
  - ... Describe Buffer modes
- Au clavier : C-h → ...
  - ... → C-h
  - C-h m

*** Exercice : customiser =delete-selection-mode=

Validation :
1. Ouvrir un fichier dans un buffer
2. Sélectionner du texte
3. Appuyer sur une lettre

Résultat attendu : la sélection *s'efface* et est remplacée par la lettre saisie.

*** Exercice : 🤫 =C-g= sans la 🔔

*** Exercice : 🤫 =C-g= sans la 🔔

Solution : =M-x customize-variable <RET> visible-bell=

** But #5 : persistance des personnalisations

Le fameux =.emacs.d/init.el=...

- Sauvegarder un buffer =*Customize*= ? 🤔
- Les fichiers =~/.emacs= et =~/.emacs.d/=
- {{{definitionofdone}}} :
  - Emacs redémarre sans signaler d'erreurs
  - Les changements de configuration sont persistants
- Exercice : renommer =~/.emacs=  → @@html:<br/>@@ =~/.emacs.d/init.el=
  - Depuis Emacs bien sûr !

** But #6 : maître des touches

@@html:<h4>... Quelles touches ?</h4>@@

1. Ouvrir votre =~/.emacs.d/init.el=
2. Rappel :
   - Help → Describe ▸ Describe buffer modes
   - =C-h m=

- {{{vocabulaire}}} : major mode, minor mode(s)
- Exercice : comment faire pour tester mes changements de =.emacs.d/init.el= sans redémarrer Emacs ?
- {{{vocabulaire}}} : =eval=

*** Maître des touches : touche Meta

Référence : https://www.emacswiki.org/emacs/MetaKeyProblems
  - Mac: =M-x customize-group <ret> ns=
  - Linux Ubuntu : (?)

*** Maître des touches : =C-z= → undo

Notre premier fragment d'Emacs Lisp «fait main» :

#+BEGIN_SRC elisp
(global-set-key [(control z)] 'undo)
#+END_SRC

*** En savoir plus sur Emacs Lisp

- =C-h f= lorsque le curseur est sur une fonction Emacs Lisp pour avoir de l'aide
  - Permet de connaître la/les touche(s) qui active(nt) cette fonction
- {{{vocabulaire}}} : fonction interactive

*** But secondaire #6.1 : cua-mode, 👍👎 ?
    :PROPERTIES:
    :reveal_background: https://img2.freepng.fr/20180311/odq/kisspng-united-states-easter-bunny-uncle-sam-richard-nixon-oil-painting-grandfather-5aa5363eac5952.823462721520776766706.jpg
    :reveal_background_opacity: 0.3
    :html_container_class: slide-text-white
    :END:

À vous d'essayer !

** But #7 : un mode majeur - Web-mode

1. Ouvrir un fichier PHP
2. @@html:<img src="./images/emacs-php-tout-nu.png" style="max-height: 40vh; margin: 0;"/>@@
3. … C'est pas terrible.

*** Configuration des dépôts
- =M-x package-list-packages <RET>=
  - Bien... Mais pas top !
    #+BEGIN_SRC elisp
    (add-to-list 'package-archives
      '("melpa" . "https://melpa.org/packages/"))
    #+END_SRC
  - Tiens... Ça plante.
    - 💡 La variable =package-archives= est modifiée avant d'être définie.
    - 🛠️ Insérer à la ligne précédente
      #+BEGIN_SRC elisp
      (require 'package)
      #+END_SRC

*** Exercice : installer web-mode

- Rappel : depuis le buffer =*Packages*=, =C-h m= pour comprendre dans quel état j'erre
- Quand c'est fait :  @@html:<img src="./images/emacs-php-web-mode.png" style="float: right; max-width: 40vh;" />@@
  1. ouvrir ou basculer vers un fichier PHP
  2. =M-x web-mode=
  3. … Profit!
- ... Mais ça ne «tient» pas au redémarrage ☹ À suivre...

*** 🤦 Pourquoi ça ne «tient» pas ?... 🤦

Pour plusieurs raisons, le système de paquetages n'est pas au cœur de l'extensibilité d'Emacs
- Historique : Emacs date de 1985 (CTAN : 1992, CPAN : 1995)
- Stallmann : Cathédrale vs. bazaar, idéalisme / control freak vs. pragmatisme

*** La solution

1. Installer [[https://jwiegley.github.io/use-package/installation/][use-package]] (cf. supra)
2.
   #+BEGIN_SRC elisp
   (package-initialize)
   (require 'use-package)

   (use-package web-mode
     :mode "\\(html?\\|php\\)$")
   #+END_SRC

*** La solution de la solution

@@html:<img src="./images/regexp-builder.gif" style="max-height: 40vh; float: right;"/>@@
@@html:<h4>@@ =M-x regexp-builder= @@html:</h4>@@
@@html:<div style="clear: both;"></div>@@

… et/ou RTFM :

- =M-x info= → =g (emacs) <RET>=
- Cliquer sur =Regexps=


** But #8 : magit — Une première “killer app” avec Emacs

- Installer Magit
- Configurer la combinaison de touches =C-x v b= pour qu'elle lance la commande =magit-status=

*** … À vous de jouer !
    :PROPERTIES:
    :reveal_background: https://surrey-content.surrey.ac.uk/sites/default/files/styles/hero_large/public/2019-01/exams-on-the-day.jpg
    :reveal_background_opacity: 0.3
    :html_container_class: slide-text-white
    :END:

*** Solution

Toujours avec [[https://jwiegley.github.io/use-package/installation/][use-package]]:

(use-package magit
  :bind ([(control x) (v) (b)] . magit-status))

{{{definitionofdone}}} : pour de meilleures performances, les paquetages «lourds» comme Magit, ne doivent *pas* se charger au démarrage d'Emacs.
- Contrôle avec =C-h v features <RET>= : cette variable ne doit pas contenir =magit=

** Je sais faire tout seul ! 1/5
    :PROPERTIES:
    :reveal_background: https://media1.popsugar-assets.com/files/thumbor/i651KmqcSTzTxBIoBQvBQitLHzo/fit-in/2048xorig/filters:format_auto-!!-:strip_icc-!!-/2021/03/18/976/n/24155406/tmp_UTsZdZ_beeeb1a5e62e84ed_GettyImages-1208799380.jpg
    :reveal_background_opacity: 0.3
    :html_container_class: slide-text-white
    :END:

En modifiant mon =~/.emacs.d/init.el=:

- Je fais marcher les touches =Home=, =End=, =C-Home= et =C-End= (ou équivalent de mon choix sur Mac)
  - Commandes respectives : =beginning-of-line=, =end-of-line=, =beginning-of-buffer= et =end-of-buffer=
- Je désactive les commandes clavier que je n'aime pas avec la fonction =global-unset-key=
- =(tool-bar-mode -1)= : si je n'aime pas les icônes

*** Je sais faire tout seul ! 2/5

Avec l'aide de Google, je choisis, j'installe et je configure ce qui me plaît parmi :

- les modes adaptés à mes langages de programmation préférés
- =column-number-mode= : fait apparaître le numéro de la colonne dans la /modeline/ à côté du numéro de ligne.
- =git-gutter= : les lignes modifiées d'un fichier qui est sous Git sont marquées dans la marge
- =undo-tree= : je voyage dans les lignes temporelles de mon travail d'édition

*** Je sais faire tout seul ! 3/5
    :PROPERTIES:
    :custom_id: complétion
    :END:

J'évalue, configure et choisis un ou des frameworks de complétion :
  - company (recommandé)
  - ido
  - auto-complete
  - (Old and busted: icicles, icomplete)
- Moar completion?
  - Helm
  - yasnippet

*** Je sais faire tout seul ! 4/5

Je consacre du temps pour maîtriser les “power features” d'Emacs 💪 :

- =org-mode= : ma vie en texte plat
- =tramp= : j'accède à des fichiers distants en ouvrant =/ssh:remote-host:/var/www/vhosts/tototutu.php=
  - ... Et je fais marcher Magit à distance ! #emacsenprod

*** Je sais faire tout seul ! 5/5
    :PROPERTIES:
    :reveal_background: https://rnli.org/-/media/rnli/images/safety/42064-yacht-sailing-view-from-onboard-boat-nathan-williams-16x9.jpg?rev=7332374b69104667a73f3429c0cf6e36&w=1500&h=844&hash=EE495B44B8DE34A21B23A0ED76BEB06D
    :reveal_background_opacity: 0.3
    :html_container_class: slide-text-white
    :END:

- Je lis une fois en entier la page d'Info (=M-x info=) d'Emacs (=g (emacs) <RET>=)
  - 💡 =M-x widen= pour tout voir d'un seul coup (sans navigation) !
    - {{{vocabulaire}}} : narrowing
- Je me crée un compte sur l'[[https://www.emacswiki.org/][EmacsWiki]]
- Je m'abonne à [[https://www.reddit.com/r/emacs/][/r/emacs]]
- Je lis [[https://github.com/emacs-tw/awesome-emacs][Awesome Emacs]] et [[https://emacsrocks.com/][Emacs Rocks]]

* Chapitre 2 : efficacité

... Ou : tout ce qu'on peut encore faire avec Emacs, sans apprendre Emacs Lisp (pour l'instant).

** But #1 : multi-fenêtrage

{{{vocabulaire}}} : une /frame/ est une division de la fenêtre d'Emacs dans laquelle s'affiche un buffer.

Exercice : que font les combinaisons de touches suivantes ?
- =C-x 2=
- =C-x 3=
- =C-x 1=
- =C-x 0=

** But #2 : Emacs comme serveur

#+BEGIN_SRC bash
cat > $HOME/bin/emacsedit <<SCRIPT
#!/bin/sh
/usr/local/Cellar/emacs-plus@28/28.1/bin/emacsclient "$@"
SCRIPT

chmod a+x $HOME/bin/emacsedit
export EDITOR=$HOME/bin/emacsedit
#+END_SRC

Tester avec =git commit=

** But #3 : framework(s) de complétion

Si [[#complétion][pas déjà fait]]

** But #4 : gérer le code dans =~/.emacs.d/=

- Y créer un dépôt Git (facile)
- Déplacer les customizations dans un fichier à part (qu'on pourra choisir de =.gitignore= r) :
  #+BEGIN_SRC elisp
  (require 'custom)
  (setq custom-file (concat user-emacs-directory "emacs-custom.el"))
  (when (file-exists-p custom-file) (load-file custom-file))
  #+END_SRC

** But #5 : /registers/ (1/3)

{{{vocabulaire}}} : un “register" est comme signet de navigateur généralisé. Il a un nom en une lettre, choisie par l'utilisateur ("a" dans les exemples qui suivent).

*** But #5 : /registers/ (2/3)

On peut par exemple stocker dans le /register/ =a= :
+ le point actuel dans un buffer : =C-x r SPC a=,
+ un bloc de texte ({{{vocabulaire}}} : une «région») : =C-x r x a=,
+ la configuration actuelle des /frames/ dans la fenêtre courante (=C-x r f a=) ou même de toutes les fenêtres (=C-x r w a=),
+ … Ou d'autres choses encore (=C-x r C-h=)

*** But #5 : /registers/ (3/3)

Pour récupérer le contenu du /register/ a (par exemple) :
- =C-x r i a= pour coller ce qu'il contient (région ou rectangle) ;
- =C-x r i a= pour sauter vers ce qu'il pointe (position, configuration des /frames/ ou fenêtres)

* Chapitre 3 : maîtrise

** But #1 : packages-as-code

L'installation des paquetages a été faite à la main et n'est donc pas as-code. Frustrations prévisibles lors de la prochaine mise à jour d'Emacs…

@@html:<div class="fragment">@@

→ Solution : apprendre et mettre en œuvre [[https://github.com/quelpa/quelpa][quelpa]] et [[https://github.com/quelpa/quelpa-use-package][quelpa-use-package]]

@@html:</div>@@

*** Solution de la solution
    :PROPERTIES:
    :html_container_class: slide-code-fineprint
    :END:

#+begin_src elisp
;; Nous nous appuyons sur use-package et quelpa (et quelpa-use-package).
;; ⚠ Sur Mac OS X, il faut d'abord installer GNU tar (`brew install
;; gnu-tar`)! Voir https://github.com/quelpa/quelpa/issues/221
(unless (package-installed-p 'quelpa)
      (with-temp-buffer
        (url-insert-file-contents
         "https://raw.githubusercontent.com/quelpa/quelpa/master/quelpa.el")
        (eval-buffer)
        (quelpa-self-upgrade)))
(setq quelpa-update-melpa-p nil)
(require 'quelpa)
(quelpa
 '(quelpa-use-package
   :fetcher git
   :url "https://github.com/quelpa/quelpa-use-package.git"))
(require 'quelpa-use-package)
#+end_src

[[*🤫 Quelpa silencieux 🤫][👨‍🍳 À suivre... 🤫]]

** But #2 : aller plus loin avec org-mode

org-mode pour les présentations : [[https://github.com/hexmode/ox-reveal][ox-reveal]]

*** But #2 : aller plus loin avec org-mode

org-mode pour le /getting things done/ :

- En-têtes TODO : =M-S-RET= et =C-c / t=
-
  #+BEGIN_SRC elisp
  (global-set-key [(control c) (.)] 'org-time-stamp)
  #+END_SRC

*** But #2 : aller plus loin avec org-mode

org-mode comme un outil de carnet de laboratoire :
  - org-babel : j'inclus des scripts dans mon fichier .org; je les exécute; leur résultat est inclus dans le document org
  - hyperliens vers d'autres fichiers (comme par exemple du code source) avec =C-c C-l= :
    #+BEGIN_SRC elisp
      (global-set-key [(control c) (control l)] 'org-store-link)
    #+END_SRC

[[*⌨️ Supprimer l'affectation de touches C-c C-l dans plusieurs modes ⌨️][⌨️ À suivre... ⌨️]]

** But #3 : Emacs comme IDE (1/2)

… Ce n'est pas le plus simple.

- En 2023, Emacs ne peut pas espérer régater avec IntelliJ (par exemple) sur le plan des fonctionnalités
- … Mais il reste plus rapide, et peut donc aider les “power users”.

*** But #3 : Emacs comme IDE (2/2)

- Commencer par le [[https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop][REPL]] d'un langage de script :
  - =M-x R= (du paquetage =ess=)
  - =M-x run-python=
- Continuer avec [[https://www.masteringemacs.org/article/how-to-get-started-tree-sitter][treesit]] pour votre langage préféré
  - 💡 Plus besoin de recompiler Emacs... Du moins si vous avez déjà la version 29 ([[https://ubuntuhandbook.org/index.php/2023/08/gnu-emacs-29-1-ubuntu-ppa/][Ubuntu]], [[https://github.com/d12frosted/homebrew-emacs-plus][Mac OS X]])
- Pour la navigation dans la lecture du code source : [[https://www.emacswiki.org/emacs/EmacsTags][ETags]]

** But #4 : Apprendre Emacs Lisp

- Un plan de route : https://emacs.stackexchange.com/questions/47318/how-can-i-start-learning-emacs-lisp
- =M-x info <RET> (elisp) <RET>=
- Choisir un dialecte «moderne»
  - [[https://www.gnu.org/software/emacs/manual/html_mono/cl.html][Paquetage cl]]
  - =lexical-binding: t=

** But #4 : Apprendre Emacs Lisp

Choisir des buts de difficulté croissante :

- 💪 Configurer telle variable seulement pour Emacs en mode terminal (~emacs -nw~)
- 💪💪 Supprimer l'affectation de touches =C-c C-l= dans une pluralité de modes (avec une boucle)
- 💪💪💪 supprimer un message perturbant avec =advice-add=

*** ⌨️ Supprimer l'affectation de touches C-c C-l dans plusieurs modes ⌨️

... De sorte que [[*But #2 : aller plus loin avec org-mode][=C-c C-l= d'org-mode prenne le pas]].

#+BEGIN_SRC elisp

(dolist (cons-mode-map `((cc-mode . c-mode-base-map)
                         (python-mode . python-mode-map)
                         (python . python-mode-map)
                         (sh-script . sh-mode-map)
                         (web-mode . web-mode-map)))
  (with-eval-after-load (car cons-mode-map)
    (define-key (symbol-value (cdr cons-mode-map))
      [(control c) (control l)] nil)))

#+END_SRC

#+ATTR_REVEAL: :frag t
- =(FOO . BAR)= , une autre façon d'écrire =(cons FOO BAR)=
  #+ATTR_REVEAL: :frag t
  - Accesseurs : =(car)= et =(cdr)=
#+ATTR_REVEAL: :frag t
- 🔎 =C-h C-f= sur =define-key=, =with-eval-after-load=, =symbol-value=

*** 🤫 Quelpa silencieux 🤫

#+ATTR_REVEAL: :frag t
Marre des messages ~not upgrading~ ceci ou cela ?

@@html:<div class="fragment">@@

#+begin_src elisp
  (advice-add
   'quelpa-build--message
   :before-until #'(lambda (msg &rest ignore)
                   "Ignore les messages contenant «Not upgrading»"
                     (string-match-p "Not upgrading" msg))
   '((name . quelpa-build--message--débavardage)))
#+end_src

@@html:</div>@@

@@html:<div class="fragment">@@

👨‍🍳 [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Advising-Functions.html][~advice-add~ 🔗]], pour patcher à la volée les fonctions écrites par d'autres !

@@html:</div>@@
